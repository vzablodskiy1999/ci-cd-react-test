# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build_lint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [ 18.x ]

    steps:
    - uses: actions/checkout@v2

    - name: setup node
      uses: actions/setup-node@master
      with:
        node-version: ${{ matrix.node-version }}

    # install applicaion dependencies
    - name: Install dependencies
      run: |
        npm install
    # build and test the apps
    - name: build
      run: |
        npm run build

  push_to_vercel:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: amondnet/vercel-action@v20
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.ORG_ID}} 
          vercel-project-id: ${{ secrets.PROJECT_ID}}
          vercel-args: "--prod"

  push_to_Docker_Hub:
    runs-on: ubuntu-latest
    needs: [build_lint]
    steps:
    
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.REACTUSERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push
      uses: docker/build-push-action@v2
      with:
        context: ./
        file: ./Dockerfile
        push: true
        tags: ${{ secrets.REACTUSERNAME }}/vite-react-test-app:latest

    - name: Run the image in a container
      uses: addnab/docker-run-action@v3
      with:
        image: ${{ secrets.REACTUSERNAME }}/vite-react-test-app:latest
        run: |
          echo "running the docker image"
